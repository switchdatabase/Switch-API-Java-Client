/*
 * Switch Database REST API
 * Switch API is the primary endpoint of data sevices and Switch DB's platform. You can do adding, editing, deleting or listing data works to your database with query operations by using this low-level API based on HTTP.
 *
 * OpenAPI spec version: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AddResponse;
import io.swagger.client.model.Body;
import io.swagger.client.model.Error;
import io.swagger.client.model.SetResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DBOperationsApi {
    private ApiClient apiClient;

    public DBOperationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DBOperationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addPost */
    private com.squareup.okhttp.Call addPostCall(String apIKey, String accessToken, String list, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/Add".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apIKey != null)
        localVarHeaderParams.put("APIKey", apiClient.parameterToString(apIKey));
        if (accessToken != null)
        localVarHeaderParams.put("AccessToken", apiClient.parameterToString(accessToken));
        if (list != null)
        localVarHeaderParams.put("List", apiClient.parameterToString(list));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPostValidateBeforeCall(String apIKey, String accessToken, String list, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apIKey' is set
        if (apIKey == null) {
            throw new ApiException("Missing the required parameter 'apIKey' when calling addPost(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling addPost(Async)");
        }
        
        // verify the required parameter 'list' is set
        if (list == null) {
            throw new ApiException("Missing the required parameter 'list' when calling addPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addPostCall(apIKey, accessToken, list, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add is used for adding a data object to the list created at Switch DB.
     * You can choose the list that will be added tha data set to with List parameter that will be sent to Header. It&#39;s equal to INSERT query at the relational databases model. The data set that will be added to the database is transmited at request body. For versions upper than v1.2.1, if the data sent is an array, all items in the array are added one by one, so they are added as a whole. 
     * @param apIKey Your Switch API Key. (required)
     * @param accessToken Your Access Token. (required)
     * @param list Your data list name. (required)
     * @param body Your new value JSON. (required)
     * @return AddResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AddResponse addPost(String apIKey, String accessToken, String list, String body) throws ApiException {
        ApiResponse<AddResponse> resp = addPostWithHttpInfo(apIKey, accessToken, list, body);
        return resp.getData();
    }

    /**
     * Add is used for adding a data object to the list created at Switch DB.
     * You can choose the list that will be added tha data set to with List parameter that will be sent to Header. It&#39;s equal to INSERT query at the relational databases model. The data set that will be added to the database is transmited at request body. For versions upper than v1.2.1, if the data sent is an array, all items in the array are added one by one, so they are added as a whole. 
     * @param apIKey Your Switch API Key. (required)
     * @param accessToken Your Access Token. (required)
     * @param list Your data list name. (required)
     * @param body Your new value JSON. (required)
     * @return ApiResponse&lt;AddResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AddResponse> addPostWithHttpInfo(String apIKey, String accessToken, String list, String body) throws ApiException {
        com.squareup.okhttp.Call call = addPostValidateBeforeCall(apIKey, accessToken, list, body, null, null);
        Type localVarReturnType = new TypeToken<AddResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add is used for adding a data object to the list created at Switch DB. (asynchronously)
     * You can choose the list that will be added tha data set to with List parameter that will be sent to Header. It&#39;s equal to INSERT query at the relational databases model. The data set that will be added to the database is transmited at request body. For versions upper than v1.2.1, if the data sent is an array, all items in the array are added one by one, so they are added as a whole. 
     * @param apIKey Your Switch API Key. (required)
     * @param accessToken Your Access Token. (required)
     * @param list Your data list name. (required)
     * @param body Your new value JSON. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPostAsync(String apIKey, String accessToken, String list, String body, final ApiCallback<AddResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPostValidateBeforeCall(apIKey, accessToken, list, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AddResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listPost */
    private com.squareup.okhttp.Call listPostCall(String apIKey, String accessToken, String list, Body body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/List".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apIKey != null)
        localVarHeaderParams.put("APIKey", apiClient.parameterToString(apIKey));
        if (accessToken != null)
        localVarHeaderParams.put("AccessToken", apiClient.parameterToString(accessToken));
        if (list != null)
        localVarHeaderParams.put("List", apiClient.parameterToString(list));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listPostValidateBeforeCall(String apIKey, String accessToken, String list, Body body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apIKey' is set
        if (apIKey == null) {
            throw new ApiException("Missing the required parameter 'apIKey' when calling listPost(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling listPost(Async)");
        }
        
        // verify the required parameter 'list' is set
        if (list == null) {
            throw new ApiException("Missing the required parameter 'list' when calling listPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling listPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = listPostCall(apIKey, accessToken, list, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * It&#39;s used for listing a data added before.
     * List parameter sent remarks the list that will be do listing work on at Header. It&#39;s equal to SELECT query at relational databases. 
     * @param apIKey Your Switch API Key. (required)
     * @param accessToken Your Access Token. (required)
     * @param list Your data list name. (required)
     * @param body Your Switch DB Query. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void listPost(String apIKey, String accessToken, String list, Body body) throws ApiException {
        listPostWithHttpInfo(apIKey, accessToken, list, body);
    }

    /**
     * It&#39;s used for listing a data added before.
     * List parameter sent remarks the list that will be do listing work on at Header. It&#39;s equal to SELECT query at relational databases. 
     * @param apIKey Your Switch API Key. (required)
     * @param accessToken Your Access Token. (required)
     * @param list Your data list name. (required)
     * @param body Your Switch DB Query. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> listPostWithHttpInfo(String apIKey, String accessToken, String list, Body body) throws ApiException {
        com.squareup.okhttp.Call call = listPostValidateBeforeCall(apIKey, accessToken, list, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * It&#39;s used for listing a data added before. (asynchronously)
     * List parameter sent remarks the list that will be do listing work on at Header. It&#39;s equal to SELECT query at relational databases. 
     * @param apIKey Your Switch API Key. (required)
     * @param accessToken Your Access Token. (required)
     * @param list Your data list name. (required)
     * @param body Your Switch DB Query. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listPostAsync(String apIKey, String accessToken, String list, Body body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listPostValidateBeforeCall(apIKey, accessToken, list, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for setDelete */
    private com.squareup.okhttp.Call setDeleteCall(String apIKey, String accessToken, String list, String listItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Set".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apIKey != null)
        localVarHeaderParams.put("APIKey", apiClient.parameterToString(apIKey));
        if (accessToken != null)
        localVarHeaderParams.put("AccessToken", apiClient.parameterToString(accessToken));
        if (list != null)
        localVarHeaderParams.put("List", apiClient.parameterToString(list));
        if (listItemId != null)
        localVarHeaderParams.put("ListItemId", apiClient.parameterToString(listItemId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setDeleteValidateBeforeCall(String apIKey, String accessToken, String list, String listItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apIKey' is set
        if (apIKey == null) {
            throw new ApiException("Missing the required parameter 'apIKey' when calling setDelete(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling setDelete(Async)");
        }
        
        // verify the required parameter 'list' is set
        if (list == null) {
            throw new ApiException("Missing the required parameter 'list' when calling setDelete(Async)");
        }
        
        // verify the required parameter 'listItemId' is set
        if (listItemId == null) {
            throw new ApiException("Missing the required parameter 'listItemId' when calling setDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = setDeleteCall(apIKey, accessToken, list, listItemId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * It&#39;s used for deleting a data added before at Switch DB.
     * List parameter sent remarks the list that will be deleted data from at Header and ListItemId parameter remarks the ID consisted by Switch DB for the data that will be deleted. It&#39;s equal to DELETE query at relational databases. 
     * @param apIKey Your Switch API Key. (required)
     * @param accessToken Your Access Token. (required)
     * @param list Your data list name. (required)
     * @param listItemId Your list item id. (required)
     * @return SetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SetResponse setDelete(String apIKey, String accessToken, String list, String listItemId) throws ApiException {
        ApiResponse<SetResponse> resp = setDeleteWithHttpInfo(apIKey, accessToken, list, listItemId);
        return resp.getData();
    }

    /**
     * It&#39;s used for deleting a data added before at Switch DB.
     * List parameter sent remarks the list that will be deleted data from at Header and ListItemId parameter remarks the ID consisted by Switch DB for the data that will be deleted. It&#39;s equal to DELETE query at relational databases. 
     * @param apIKey Your Switch API Key. (required)
     * @param accessToken Your Access Token. (required)
     * @param list Your data list name. (required)
     * @param listItemId Your list item id. (required)
     * @return ApiResponse&lt;SetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SetResponse> setDeleteWithHttpInfo(String apIKey, String accessToken, String list, String listItemId) throws ApiException {
        com.squareup.okhttp.Call call = setDeleteValidateBeforeCall(apIKey, accessToken, list, listItemId, null, null);
        Type localVarReturnType = new TypeToken<SetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * It&#39;s used for deleting a data added before at Switch DB. (asynchronously)
     * List parameter sent remarks the list that will be deleted data from at Header and ListItemId parameter remarks the ID consisted by Switch DB for the data that will be deleted. It&#39;s equal to DELETE query at relational databases. 
     * @param apIKey Your Switch API Key. (required)
     * @param accessToken Your Access Token. (required)
     * @param list Your data list name. (required)
     * @param listItemId Your list item id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setDeleteAsync(String apIKey, String accessToken, String list, String listItemId, final ApiCallback<SetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setDeleteValidateBeforeCall(apIKey, accessToken, list, listItemId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for setPost */
    private com.squareup.okhttp.Call setPostCall(String apIKey, String accessToken, String list, String listItemId, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/Set".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apIKey != null)
        localVarHeaderParams.put("APIKey", apiClient.parameterToString(apIKey));
        if (accessToken != null)
        localVarHeaderParams.put("AccessToken", apiClient.parameterToString(accessToken));
        if (list != null)
        localVarHeaderParams.put("List", apiClient.parameterToString(list));
        if (listItemId != null)
        localVarHeaderParams.put("ListItemId", apiClient.parameterToString(listItemId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setPostValidateBeforeCall(String apIKey, String accessToken, String list, String listItemId, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apIKey' is set
        if (apIKey == null) {
            throw new ApiException("Missing the required parameter 'apIKey' when calling setPost(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling setPost(Async)");
        }
        
        // verify the required parameter 'list' is set
        if (list == null) {
            throw new ApiException("Missing the required parameter 'list' when calling setPost(Async)");
        }
        
        // verify the required parameter 'listItemId' is set
        if (listItemId == null) {
            throw new ApiException("Missing the required parameter 'listItemId' when calling setPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = setPostCall(apIKey, accessToken, list, listItemId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * It&#39;s used for updating a data object that is already added to Switch DB.
     * In order to UPDATE a object, Listname and ListItemId parameters should be sent in the Header of the REQUEST as \&quot;List\&quot;, \&quot;ListItemId\&quot;, respectively, as shown in the example below. It&#39;s equal to UPDATE query at relational databases. The data set that will be edited is transmited to the database at request body. 
     * @param apIKey Your Switch API Key. (required)
     * @param accessToken Your Access Token. (required)
     * @param list Your data list name. (required)
     * @param listItemId Your list item id. (required)
     * @param body Your new value JSON. (required)
     * @return SetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SetResponse setPost(String apIKey, String accessToken, String list, String listItemId, String body) throws ApiException {
        ApiResponse<SetResponse> resp = setPostWithHttpInfo(apIKey, accessToken, list, listItemId, body);
        return resp.getData();
    }

    /**
     * It&#39;s used for updating a data object that is already added to Switch DB.
     * In order to UPDATE a object, Listname and ListItemId parameters should be sent in the Header of the REQUEST as \&quot;List\&quot;, \&quot;ListItemId\&quot;, respectively, as shown in the example below. It&#39;s equal to UPDATE query at relational databases. The data set that will be edited is transmited to the database at request body. 
     * @param apIKey Your Switch API Key. (required)
     * @param accessToken Your Access Token. (required)
     * @param list Your data list name. (required)
     * @param listItemId Your list item id. (required)
     * @param body Your new value JSON. (required)
     * @return ApiResponse&lt;SetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SetResponse> setPostWithHttpInfo(String apIKey, String accessToken, String list, String listItemId, String body) throws ApiException {
        com.squareup.okhttp.Call call = setPostValidateBeforeCall(apIKey, accessToken, list, listItemId, body, null, null);
        Type localVarReturnType = new TypeToken<SetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * It&#39;s used for updating a data object that is already added to Switch DB. (asynchronously)
     * In order to UPDATE a object, Listname and ListItemId parameters should be sent in the Header of the REQUEST as \&quot;List\&quot;, \&quot;ListItemId\&quot;, respectively, as shown in the example below. It&#39;s equal to UPDATE query at relational databases. The data set that will be edited is transmited to the database at request body. 
     * @param apIKey Your Switch API Key. (required)
     * @param accessToken Your Access Token. (required)
     * @param list Your data list name. (required)
     * @param listItemId Your list item id. (required)
     * @param body Your new value JSON. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setPostAsync(String apIKey, String accessToken, String list, String listItemId, String body, final ApiCallback<SetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setPostValidateBeforeCall(apIKey, accessToken, list, listItemId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
